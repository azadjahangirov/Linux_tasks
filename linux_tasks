#! /bin/bash


#1) Execute the pwd command to check your location in the directory tree. Run the lscommand with appropriate switches to show files in the current directory along with ALL HIDDEN FILES. Redirect this command result to this file /tmp/content.txt
# Solution:  Using below commands task is successfully completed.
# ls -la >> /tmp/content.txt

#2) a)Log on to ec2 as ubuntu and execute the logname, whoami, who, and w commands one at a time. Verify the identity of ubuntu by comparing the output of these commands. The output should show ubuntu as the user logged on and running these commands. b)Execute the id and groups commands and verify the identity of ubuntu by comparing the output of these commands. Identify the additional information that the id command provides but not the groups command. c)Record your results in a text file created with the vi editor in ubuntu’s home directory.
# Solution:
# a)
#commands: logname ; whoami ; who ; w
#result: 
#ubuntu
#ubuntu
#ubuntu   pts/0        2021-09-16 22:15 (3.126.121.35)
# 22:53:17 up 2 days,  8:07,  1 user,  load average: 0.00, 0.00, 0.00
# USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
# ubuntu   pts/0    3.126.121.35     22:15    0.00s  0.09s  0.00s w
# b)
#command: id
#result:  uid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),119(docker)

#command: group
#result:  ubuntu docker

# c)
# logname >> task2_results.txt
# whoami >> task2_results.txt
# who >> task2_results.txt
# w >> task2_results.txt
# id >> task2_results.txt
# groups >> task2_results.txt


# 3) Log on to ec2 as root, execute the last and lastb commands, and record in a file which users have recently logged in to and out of the system successfully and unsuccessfully. Also list the timestamp when the system was last rebooted. Use the vi editor to record your results.

' command:sudo su
result:root@ip-172-31-12-115:/home/ubuntu#

command: last -Fn 6  -- "-n"shows last 6 lines to show "-F" full login and logout times and dates
result:" 
ubuntu   pts/0        3.65.27.111      Fri Sep 17 21:06:23 2021   still logged in
ubuntu   pts/0        18.192.21.173    Fri Sep 17 16:31:40 2021 - Fri Sep 17 16:53:32 2021  (00:21)
ubuntu   pts/0        35.158.215.7     Fri Sep 17 14:14:20 2021 - Fri Sep 17 14:58:40 2021  (00:44)
reboot   system boot  5.11.0-1017-aws  Fri Sep 17 14:09:43 2021   still running
ubuntu   pts/0        3.126.121.35     Thu Sep 16 22:15:57 2021 - Thu Sep 16 23:26:50 2021  (01:10)
ubuntu   pts/0        18.196.191.111   Thu Sep 16 19:37:32 2021 - Thu Sep 16 20:13:10 2021  (00:35)

command: lastb -Fn 6 --last unsuccessfully logged in and out.
result: 
csgoserv ssh:notty    199.19.226.34    Fri Sep 17 20:33:58 2021 - Fri Sep 17 20:33:58 2021  (00:00)
csgo     ssh:notty    199.19.226.34    Fri Sep 17 20:33:57 2021 - Fri Sep 17 20:33:57 2021  (00:00)
csgoserv ssh:notty    199.19.226.34    Fri Sep 17 20:33:54 2021 - Fri Sep 17 20:33:54 2021  (00:00)
csgo     ssh:notty    199.19.226.34    Fri Sep 17 20:33:53 2021 - Fri Sep 17 20:33:53 2021  (00:00)
csgo     ssh:notty    199.19.226.34    Fri Sep 17 20:33:52 2021 - Fri Sep 17 20:33:52 2021  (00:00)
steam    ssh:notty    199.19.226.34    Fri Sep 17 20:33:50 2021 - Fri Sep 17 20:33:50 2021  (00:00)

command: last reboot  --displays last reboot times
result:
reboot   system boot  5.11.0-1017-aws  Fri Sep 17 14:09   still running
reboot   system boot  5.4.0-1045-aws   Tue Sep 14 14:45 - 23:26 (2+08:41)
reboot   system boot  5.4.0-1045-aws   Mon Sep 13 13:32 - 23:42  (10:10)

last -Fn 6 > "lastlogs"
lastb -Fn 6 >> lastlogs
last reboot >> lastlogs
'


#4) Log on to ec2 as ubuntu and execute the hostname and uname commands. Identify the system’s name, kernel version, RHEL release, and the hardware architecture of this system. Record your results in a file using the vi editor.
# SOLUTION
'command: uname    --shows system name
result: Linux

command: uname -n or hostname   --shows systems name, both commands giving the same results
result: ip-172-31-12-115

command: uname -o  --operating systems name
result: GNU/Linux

command: uname -v   --kernel version
result: #18~20.04.1-Ubuntu SMP Fri Aug 27 11:21:54 UTC 2021

command:uname -ip   --"-i" shows hardware platform, "-p" processor type
result: x86_64 x86_64

uname > "system_info"
hostname >> system_info
uname -o >> system_info
uname -v >> system_info
uname -ip >> system_info'

#5) Log on to ec2 as ubuntu and execute the date and timedatectl commands to check the current system date and time. Identify the differences between the two outputs. Use timedatectl and change the system date to a date in January of the following year. Issue the date command and change the system time to one hour ahead of the current time. Observe the new date and time with both commands. Reset the date and time back to the current actual time using either the date or the timedatectl command.

#6) Log on to ec2 as ubuntu and execute the uptime command. Identify the amount of time the system has been up for and the number of users currently logged on. Run the wc command and show how many lines, words, and bytes are in the /etc/profile file.
#commands are below:
'uptime  --shows last log
wc -lwc /etc/profile  -- shows lines, words and bytes.'


#7) Log on to ec2 as ubuntu and execute the tar command to archive the contents of the entire /etc directory tree. List content of the tar archive  to the file. Restore the archive file to the /opt directory

'sudo tar -cvf archive.tar /etc/    -- to archive entire etc to tar file
tat -tvf arcchive.tar > file.tar   -- list content of the tar archive to the file
sudo tar -xvf archive.tar -C /etc/opt   -- extract the archive.tar file to opt'


# TASKS II

# Log on to ec2 as ubuntu and execute the find command to search for all files in the /etc directory structure that have been modified in the past 10 days.

'Solution:
find /etc -mtime -10 -ls
find /etc -mtime +10 -ls   --finds files modification date is older than 10 days'



# 2) Log on to ec2 as ubuntu and create one file and one directory in the home directory. List the file and directory and observe the permissions, ownership, and owning group. Try to move the file and directory to the /var/log directory and observe the output. Try again to move them to the /tmp directory. Duplicate the file with the cp command and then rename the duplicated file using any name. Finally, remove the file and directory created for this lab.

'Solution:
touch testfile
mkdir testdir
ls -l
sudo mv /home/ubuntu/testdir /var/log/testdir
sudo mv /home/ubuntu/testfile /var/log/testfile
sudo mv /var/log/testfile /tmp/testfile
sudo mv /var/log/testdir /tmp/testdir
cp testfile testfilever2
cp -r testdir testdirver
rm -r testdirver2
rm -r testdir
rm testfile
rm testfilever2
'




# 3) Log on to ec2 as ubuntu and execute the find command to search for regular files in the /etc directory structure that were accessed more than 10 days ago, are not bigger than 5MB in size, and are owned by the user root.
'Solution:
sudo find /etc -type f -size -5M -user root -mtime +10
'

# 4) Log on to ec2 as ubuntu and create file file11 and directory dir11 in the user’s home directory. Make a note of the permissions on them. Run the umask command to determine the current umask. Change the umask value to 0035 using the symbolic notation and then create file22 and directory dir22 in the user’s home directory. Observe the permissions on file22 and dir22 and compare them with the permissions on file11 and dir11. Using the chmod command, modify the permissions on file11 to match that on file22. Using the chmod command, modify the permissions on dir22 to match that on dir11. Do not remove file11, file22, dir11, and dir22 yet.
'Solution:
touch file11
mkdir dir11
ls -l
umask     --default umask result is 0002
umask u=rwx,g=r,o=w   --now we changed it to 0035
file22
dir22
chmod 642 file11
chmod 775 dir22
ls -l'

 
# 5) Log on to ec2 as ubunut and create directory /shared_dir1. Create a group called shared_grp and assign user1000 and user2000 to it (create these users if they do not already exist). Set up appropriate ownership, group membership, and permissions on the directory to support group collaboration.
'sOLUTION: 
mkdir shared_dir1 
groupadd shared_grp
less /etc/group
sudo adduser --ingroup shared_grp user1000
sudo adduser --ingroup shared_grp user2000
sudo chown -R :shared_grp /home/ubuntu/shared_dir1/
And give rwx permission to group if it does not have.'

